"""redesign composition usage

Revision ID: g279a49782e4
Revises: f954e23fc3d7
Create Date: 2025-10-21 10:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
import json


# revision identifiers, used by Alembic.
revision = 'g279a49782e4'
down_revision = 'f954e23fc3d7'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    composition_usage_item_table = op.create_table('composition_usage_item',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('usage_history_id', sa.Integer(), nullable=False),
    sa.Column('inventory_item_id', sa.Integer(), nullable=False),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.Column('item_name', sa.String(), nullable=True),
    sa.Column('item_category', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_items.id'], ),
    sa.ForeignKeyConstraint(['usage_history_id'], ['composition_usage_history.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_composition_usage_item_id'), 'composition_usage_item', ['id'], unique=False)

    # Data migration
    conn = op.get_bind()
    res = conn.execute(sa.text("select id, composition_items from composition_usage_history"))
    results = res.fetchall()
    
    for r in results:
        history_id = r[0]
        items_json = r[1]
        if isinstance(items_json, str):
            items = json.loads(items_json)
        else:
            items = items_json
        
        for item in items:
            op.execute(
                composition_usage_item_table.insert().values(
                    usage_history_id=history_id,
                    inventory_item_id=item['inventory_item_id'],
                    weight=item['weight'],
                    item_name=item['item_name'],
                    item_category='Feed'
                )
            )

    with op.batch_alter_table('composition_usage_history', schema=None) as batch_op:
        batch_op.drop_column('composition_items')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('composition_usage_history', schema=None) as batch_op:
        batch_op.add_column(sa.Column('composition_items', sa.JSON(), nullable=True))

    # Data migration back to JSON
    conn = op.get_bind()
    res = conn.execute(sa.text("select id from composition_usage_history"))
    history_results = res.fetchall()

    for r in history_results:
        history_id = r[0]
        items_res = conn.execute(sa.text(f"select inventory_item_id, weight, item_name, item_category from composition_usage_item where usage_history_id = {history_id}"))
        items_results = items_res.fetchall()
        
        items_list = []
        for item_row in items_results:
            items_list.append({
                'inventory_item_id': item_row[0],
                'weight': item_row[1],
                'item_name': item_row[2],
                'category': item_row[3]
            })
        
        op.execute(
            sa.text(f"update composition_usage_history set composition_items = '{json.dumps(items_list)}' where id = {history_id}")
        )
    
    with op.batch_alter_table('composition_usage_history', schema=None) as batch_op:
        batch_op.alter_column('composition_items', nullable=False)

    op.drop_index(op.f('ix_composition_usage_item_id'), table_name='composition_usage_item')
    op.drop_table('composition_usage_item')
    # ### end Alembic commands ###
