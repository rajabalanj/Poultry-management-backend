"""Add opening balance columns to egg room reports

Revision ID: d7e78437a292
Revises: 10145adbab24
Create Date: 2025-08-12 00:49:16.730433

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = 'd7e78437a292'
down_revision: Union[str, None] = '10145adbab24'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('egg_room_reports', sa.Column('table_opening', sa.Integer(), nullable=False, server_default='0'))
    op.add_column('egg_room_reports', sa.Column('grade_c_opening', sa.Integer(), nullable=False, server_default='0'))
    op.add_column('egg_room_reports', sa.Column('jumbo_opening', sa.Integer(), nullable=False, server_default='0'))
    # ### end Alembic commands ###

    # Data migration
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)

    # Define the table structure for the query
    egg_room_reports_table = sa.Table('egg_room_reports', sa.MetaData(),
        sa.Column('report_date', sa.Date, primary_key=True),
        sa.Column('table_opening', sa.Integer),
        sa.Column('table_received', sa.Integer),
        sa.Column('table_transfer', sa.Integer),
        sa.Column('table_damage', sa.Integer),
        sa.Column('table_out', sa.Integer),
        sa.Column('jumbo_out', sa.Integer),
        sa.Column('grade_c_opening', sa.Integer),
        sa.Column('grade_c_shed_received', sa.Integer),
        sa.Column('grade_c_transfer', sa.Integer),
        sa.Column('grade_c_labour', sa.Integer),
        sa.Column('grade_c_waste', sa.Integer),
        sa.Column('jumbo_opening', sa.Integer),
        sa.Column('jumbo_received', sa.Integer),
        sa.Column('jumbo_transfer', sa.Integer),
        sa.Column('jumbo_waste', sa.Integer)
    )

    reports = session.query(egg_room_reports_table).order_by(egg_room_reports_table.c.report_date).all()

    prev_closing_balances = {
        'table': 0,
        'jumbo': 0,
        'grade_c': 0
    }

    for report in reports:
        # Update current report's opening balances with the previous day's closing balances
        session.execute(
            egg_room_reports_table.update()
            .where(egg_room_reports_table.c.report_date == report.report_date)
            .values(
                table_opening=prev_closing_balances['table'],
                jumbo_opening=prev_closing_balances['jumbo'],
                grade_c_opening=prev_closing_balances['grade_c']
            )
        )

        # Calculate current report's closing balances for the next iteration
        table_in = report.jumbo_out or 0
        table_opening = prev_closing_balances['table']
        table_closing = table_opening + (report.table_received or 0) - (report.table_transfer or 0) - (report.table_damage or 0) - (report.table_out or 0) + table_in

        jumbo_in = report.table_out or 0
        jumbo_opening = prev_closing_balances['jumbo']
        jumbo_closing = jumbo_opening + (report.jumbo_received or 0) - (report.jumbo_transfer or 0) - (report.jumbo_waste or 0) + jumbo_in - (report.jumbo_out or 0)

        grade_c_room_received = report.table_damage or 0
        grade_c_opening = prev_closing_balances['grade_c']
        grade_c_closing = grade_c_opening + (report.grade_c_shed_received or 0) + grade_c_room_received - (report.grade_c_transfer or 0) - (report.grade_c_labour or 0) - (report.grade_c_waste or 0)
        
        prev_closing_balances['table'] = table_closing
        prev_closing_balances['jumbo'] = jumbo_closing
        prev_closing_balances['grade_c'] = grade_c_closing

    session.commit()

def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('egg_room_reports', 'jumbo_opening')
    op.drop_column('egg_room_reports', 'grade_c_opening')
    op.drop_column('egg_room_reports', 'table_opening')
    # ### end Alembic commands ###