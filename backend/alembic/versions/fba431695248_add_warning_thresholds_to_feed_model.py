"""Add warning thresholds to Feed model

Revision ID: fba431695248
Revises: 09eb52b8b818
Create Date: 2025-06-30 23:24:23.126794

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'fba431695248'
down_revision: Union[str, None] = '09eb52b8b818'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_index('ix_app_config_id', table_name='app_config')
    # op.drop_table('app_config')
    # op.drop_table('egg_room_reports')
    # op.drop_index('ix_users_id', table_name='users')
    # op.drop_index('ix_users_username', table_name='users')
    # op.drop_table('users')
    op.add_column('feed', sa.Column('warningKgThreshold', sa.Numeric(precision=10, scale=3), nullable=True))
    op.add_column('feed', sa.Column('warningTonThreshold', sa.Numeric(precision=10, scale=3), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('feed', 'warningTonThreshold')
    op.drop_column('feed', 'warningKgThreshold')
    # op.create_table('users',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    # sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    # sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('is_superuser', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name='users_pkey')
    # )
    # op.create_index('ix_users_username', 'users', ['username'], unique=True)
    # op.create_index('ix_users_id', 'users', ['id'], unique=False)
    # op.create_table('egg_room_reports',
    # sa.Column('report_date', sa.DATE(), autoincrement=False, nullable=False),
    # sa.Column('table_opening', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('table_received', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('table_transfer', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('table_damage', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('table_out', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('table_closing', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('grade_c_opening', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('grade_c_shed_received', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('grade_c_room_received', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('grade_c_transfer', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('grade_c_labour', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('grade_c_waste', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('grade_c_closing', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('jumbo_opening', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('jumbo_received', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('jumbo_transfer', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('jumbo_waste', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('jumbo_in', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('jumbo_closing', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('report_date', name='egg_room_reports_pkey')
    # )
    # op.create_table('app_config',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    # sa.Column('value', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    # sa.PrimaryKeyConstraint('id', name='app_config_pkey'),
    # sa.UniqueConstraint('name', name='app_config_name_key')
    # )
    # op.create_index('ix_app_config_id', 'app_config', ['id'], unique=False)
    # # ### end Alembic commands ###
